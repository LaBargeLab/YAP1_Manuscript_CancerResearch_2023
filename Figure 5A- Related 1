#DESeq2
library(DESeq2)
#Make a variable pointing to path your htseq count files are in
directory <- "~/Desktop/RNAseq_Analyses/2020_2021_Analyses_Old_Computer/DESeq2_Analyses_DataGenerated/Yap1_2_4_184A1_countfiles/"

#Generate a sample table
#Get the names of all files want to analyze
sampleFiles1 <- grep("33708",list.files(directory),value=TRUE)
sampleFiles2 <- grep("33709",list.files(directory),value=TRUE)
sampleFiles3 <- grep("33710",list.files(directory),value=TRUE)
sampleFiles4 <- grep("33711",list.files(directory),value=TRUE)
sampleFiles5 <- grep("33712",list.files(directory),value=TRUE)
sampleFiles6 <- grep("33713",list.files(directory),value=TRUE)
sampleFiles7 <- grep("33714",list.files(directory),value=TRUE)
sampleFiles8 <- grep("33715",list.files(directory),value=TRUE)
sampleFiles9 <- grep("33716",list.files(directory),value=TRUE)
sampleFiles10 <- grep("33717",list.files(directory),value=TRUE)
sampleFiles11 <- grep("33718",list.files(directory),value=TRUE)
sampleFiles12 <- grep("33719",list.files(directory),value=TRUE)
sampleFiles13 <- grep("33720",list.files(directory),value=TRUE)
sampleFiles14 <- grep("33721",list.files(directory),value=TRUE)
sampleFiles15 <- grep("33722",list.files(directory),value=TRUE)
sampleFiles16 <- grep("33723",list.files(directory),value=TRUE)
sampleFiles17 <- grep("33724",list.files(directory),value=TRUE)
sampleFiles18 <- grep("33725",list.files(directory),value=TRUE)
sampleFiles19 <- grep("33726",list.files(directory),value=TRUE)
sampleFiles20 <- grep("33727",list.files(directory),value=TRUE)
sampleFiles21 <- grep("33728",list.files(directory),value=TRUE)
sampleFiles <- c(sampleFiles1,sampleFiles2,sampleFiles3,sampleFiles4,sampleFiles5,sampleFiles6,sampleFiles7,sampleFiles8,
                 sampleFiles9,sampleFiles10,sampleFiles11, sampleFiles12, sampleFiles13,sampleFiles14,sampleFiles15,sampleFiles16,
                 sampleFiles17, sampleFiles18, sampleFiles19,sampleFiles20,sampleFiles21)

#Get names of samples want to analyze
NamesOfSamples <- sampleFiles
NamesOfSamples2 <- gsub(pattern = "\\d+_Yap", replacement = "Yap", x = NamesOfSamples)
NamesOfSamples3 <- gsub(pattern = "_L999.bam.count", replacement = "", x = NamesOfSamples2)

#Sampletype
SampleType1 <- gsub(pattern = "_\\d$", replacement = "", x = NamesOfSamples3)
SampleType1

#Make a list of condition 1, ctrl or yap samples
CtrlorYap <- c(rep("Ctrl",6),rep("Yap",15))

#Make a table of sample names, file names, and condition
sampleTable <- data.frame(sampleName = NamesOfSamples3,
                          fileName = sampleFiles,
                          phenotype = CtrlorYap,
                          sampletype = SampleType1)

#Build DESeqDataSet using DESeqDataSetFromHTSeqCount function
Yap4dds <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
                                      directory = directory,
                                      design= ~ sampletype)

#Pre-filtering, remove rows of genes with less than 10 reads, makes things faster
keep <- rowSums(counts(Yap4dds)) >= 10
Yap4dds <- Yap4dds[keep,]

#Run deseq algorithm on dataset
Yap4dds <- DESeq(Yap4dds)

#Calculate rlog transformed values of count data
#Returns SummarizedExperiment object which contains rlog-transformed values in its assay slot 
rld <- rlog(Yap4dds)
dat <- assay(rld)


mycdata <- dat["ENSG00000136997",]
df <- data.frame(mycdata)

dock4data <- dat["ENSG00000128512",]
df$dock4data <- dock4data

IMMP2Ldata <- dat["ENSG00000184903",]
df$IMMP2Ldata <- IMMP2Ldata

SampleType <- as.factor(SampleType1)
df$SampleType <- SampleType

Transduction <-as.factor(CtrlorYap)
df$Transduction <- Transduction

Passage <- as.numeric(c(rep("12",3),rep("17",3),rep("12",3),rep("17",3),rep("18",3),rep("20",3),rep("24",3)))
df$Passage <- Passage

df <- subset(df,Transduction == "Yap")

library(ggplot2)

pdf("YAP4Experiment_MycExpression.pdf")
ggplot(df, aes(x=Passage, y=mycdata)) + 
  geom_point()  +
  geom_smooth(span=2, col='yellow',size=1, se=FALSE) +
  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
dev.off()

pdf("YAP4Experiment_Dock4Expression.pdf")
ggplot(df, aes(x=Passage, y=dock4data)) + 
  geom_point()  +
  geom_smooth(span=2, col='yellow',size=1, se=FALSE) +
  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
dev.off()

pdf("YAP4Experiment_IMMP2LExpression.pdf")
ggplot(df, aes(x=Passage, y=IMMP2Ldata)) + 
  geom_point()  +
  geom_smooth(span=2, col='yellow',size=1, se=FALSE) +
  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
dev.off()
