####Plot YAP1 expression levels in Control and YAP1 transduced cells at multiple growth states

#DESeq2
library(DESeq2)
#Make a variable pointing to path your htseq count files are in
directory <- "~/Desktop/RNAseq_Analyses/2020_2021_Analyses_Old_Computer/DESeq2_Analyses_DataGenerated/Yap1_2_4_184A1_countfiles/"

#Generate a sample table
#Get the names of all files want to analyze
sampleFiles1 <- grep("14914",list.files(directory),value=TRUE)
sampleFiles2 <- grep("14915",list.files(directory),value=TRUE)
sampleFiles3 <- grep("14916",list.files(directory),value=TRUE)
sampleFiles4 <- grep("14917",list.files(directory),value=TRUE)
sampleFiles5 <- grep("26247",list.files(directory),value=TRUE)
sampleFiles6 <- grep("26248",list.files(directory),value=TRUE)
sampleFiles7 <- grep("26249",list.files(directory),value=TRUE)
sampleFiles8 <- grep("26250",list.files(directory),value=TRUE)
sampleFiles9 <- grep("33708",list.files(directory),value=TRUE)
sampleFiles10 <- grep("33709",list.files(directory),value=TRUE)
sampleFiles11 <- grep("33710",list.files(directory),value=TRUE)
sampleFiles12 <- grep("33711",list.files(directory),value=TRUE)
sampleFiles13 <- grep("33712",list.files(directory),value=TRUE)
sampleFiles14 <- grep("33713",list.files(directory),value=TRUE)
sampleFiles15 <- grep("33714",list.files(directory),value=TRUE)
sampleFiles16 <- grep("33715",list.files(directory),value=TRUE)
sampleFiles17 <- grep("33716",list.files(directory),value=TRUE)
sampleFiles18 <- grep("33717",list.files(directory),value=TRUE)
sampleFiles19 <- grep("33718",list.files(directory),value=TRUE)
sampleFiles20 <- grep("33719",list.files(directory),value=TRUE)
sampleFiles21 <- grep("33720",list.files(directory),value=TRUE)
sampleFiles22 <- grep("33721",list.files(directory),value=TRUE)
sampleFiles23 <- grep("33722",list.files(directory),value=TRUE)
sampleFiles24 <- grep("33723",list.files(directory),value=TRUE)
sampleFiles25 <- grep("33724",list.files(directory),value=TRUE)
sampleFiles26 <- grep("33725",list.files(directory),value=TRUE)
sampleFiles27 <- grep("33726",list.files(directory),value=TRUE)
sampleFiles28 <- grep("33727",list.files(directory),value=TRUE)
sampleFiles29 <- grep("33728",list.files(directory),value=TRUE)

sampleFiles <- c(sampleFiles1,sampleFiles2,sampleFiles3,sampleFiles4,sampleFiles5,sampleFiles6,sampleFiles7,sampleFiles8,sampleFiles9,sampleFiles10,
                 sampleFiles11,sampleFiles12,sampleFiles13,sampleFiles14,sampleFiles15,sampleFiles16,sampleFiles17,sampleFiles18,sampleFiles19,
                 sampleFiles20,sampleFiles21,sampleFiles22,sampleFiles23,sampleFiles24,sampleFiles25,sampleFiles26,sampleFiles27,sampleFiles28,
                 sampleFiles29)

#Get names of samples want to analyze
NamesOfSamples <- sampleFiles
NamesOfSamples2 <- gsub(pattern = "\\d+_Yap", replacement = "Yap", x = NamesOfSamples)
NamesOfSamples3 <- gsub(pattern = "_L999.bam.count", replacement = "", x = NamesOfSamples2)

#Make a list of condition 1, ctrl or yap samples
CtrlorYap <- c("Ctrl",rep("Yap",3),"Ctrl",rep("Yap",3),rep("Ctrl",6),rep("Yap",15))

#Make a list of the background experiment/run
experiment <- c(rep("1",4),rep("2",4),rep("4",21))

#Make a table of sample names, file names, and condition
sampleTable <- data.frame(sampleName = NamesOfSamples3,
                          fileName = sampleFiles,
                          phenotype = CtrlorYap,
                          background = experiment)

#Build DESeqDataSet using DESeqDataSetFromHTSeqCount function
Yap4dds <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
                                      directory = directory,
                                      design= ~ background + phenotype)

#Pre-filtering, remove rows of genes with less than 10 reads, makes things faster
keep <- rowSums(counts(Yap4dds)) >= 10
Yap4dds <- Yap4dds[keep,]

#Run deseq algorithm on dataset
Yap4dds <- DESeq(Yap4dds)

#Order factor levels
Yap4dds$phenotype <- relevel(Yap4dds$phenotype, ref = "Ctrl")

#Makes a result table
Yap4dds <- DESeq(Yap4dds)
res <- results(Yap4dds, name = "phenotype_Yap_vs_Ctrl", alpha = 0.05)

#Order Results based on lowest p-values
resOrdered <- res[order(res$padj),]

#basic tallies
summary(resOrdered)

#exporting only results that pass adjusted p-value threshold
resSig <- subset(resOrdered, padj < 0.05)

#Batch Correct
library(sva)

#Calculate rlog transformed values of count data
#Returns SummarizedExperiment object which contains rlog-transformed values in its assay slot 
rld <- rlog(Yap4dds)
dat <- assay(rld)
batch = Yap4dds$background
mod0 <- model.matrix(~   1, colData(Yap4dds))
combat_data = ComBat(dat=dat, batch=batch,mod=mod0,par.prior=TRUE, prior.plots=FALSE)

yapdata <- combat_data["ENSG00000137693",]
yapdataframe <- data.frame(yapdata)

SampleName <- as.factor(NamesOfSamples3)
yapdataframe$SampleName <- SampleName

Transduction <- as.factor(Yap4dds$phenotype)
yapdataframe$Transduction <- Transduction

Specimen <- as.factor(Yap4dds$background)
yapdataframe$Specimen <- Specimen

library(ggplot2)
pdf("Yap1 Expression_boxandwhisker_1.pdf")
ggplot(yapdataframe, aes(x=Transduction, y=yapdata)) + 
  geom_boxplot() +
  geom_dotplot(aes(fill=Specimen),binaxis='y',stackdir='center', position=position_dodge(.2)) +
  ylab("Log Transformed Count") +
  theme_bw() + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
  theme(aspect.ratio = 9/12) +
  theme(axis.text.x = element_text(size=14)) +
  theme(axis.title.y = element_text(size=14)) +
  theme(axis.title.x = element_blank()) +
  theme(legend.text=element_text(size=14)) +
  theme(legend.title=element_text(size=14)) +
  theme(axis.text.y = element_text(size=12))
dev.off()

